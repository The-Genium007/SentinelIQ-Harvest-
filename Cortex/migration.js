/**
 * üîÑ Module de migration pour Cortex v2.0
 * Utilitaires pour la migration vers l'architecture optimis√©e
 */

import { logger } from '../utils/logger.js';
import { cortexOptimized } from './cortexOptimized.js';
import { cortexDataManager } from './dataManager.js';
import { scrapingEngine } from './scrapingEngine.js';
import { cortexPerformanceManager } from './performanceManager.js';

class CortexMigration {
    constructor() {
        this.migrationSteps = [
            'testConnections',
            'backupCurrentData',
            'migrateConfiguration',
            'testOptimizedVersion',
            'validateMigration',
            'cleanupOldFiles'
        ];

        this.migrationStatus = {
            isRunning: false,
            currentStep: null,
            completedSteps: [],
            errors: [],
            startTime: null,
            endTime: null
        };
    }

    /**
     * Lance la migration compl√®te vers Cortex v2.0
     * @param {Object} options - Options de migration
     * @returns {Promise<Object>} R√©sultats de la migration
     */
    async migrateToV2(options = {}) {
        if (this.migrationStatus.isRunning) {
            return { success: false, error: 'Migration already in progress' };
        }

        const migrationId = `migration-${Date.now()}`;
        this.migrationStatus.isRunning = true;
        this.migrationStatus.startTime = Date.now();
        this.migrationStatus.completedSteps = [];
        this.migrationStatus.errors = [];

        logger.info(`üîÑ D√©marrage migration Cortex v2.0: ${migrationId}`, 'CortexMigration');

        try {
            const migrationConfig = {
                createBackup: true,
                validateData: true,
                testNewVersion: true,
                preserveOldFiles: true,
                autoCleanup: false,
                ...options
            };

            // Ex√©cution des √©tapes de migration
            for (const step of this.migrationSteps) {
                await this.executeStep(step, migrationConfig);
            }

            this.migrationStatus.endTime = Date.now();
            const duration = this.migrationStatus.endTime - this.migrationStatus.startTime;

            logger.info(`‚úÖ Migration Cortex v2.0 termin√©e en ${duration}ms`, 'CortexMigration');

            return {
                success: true,
                migrationId,
                duration,
                completedSteps: this.migrationStatus.completedSteps,
                errors: this.migrationStatus.errors
            };

        } catch (error) {
            logger.error(`‚ùå Erreur migration Cortex: ${error.message}`, 'CortexMigration');
            return {
                success: false,
                migrationId,
                error: error.message,
                completedSteps: this.migrationStatus.completedSteps,
                errors: this.migrationStatus.errors
            };
        } finally {
            this.migrationStatus.isRunning = false;
        }
    }

    /**
     * Ex√©cute une √©tape de migration
     * @param {string} stepName - Nom de l'√©tape
     * @param {Object} config - Configuration
     */
    async executeStep(stepName, config) {
        this.migrationStatus.currentStep = stepName;
        logger.info(`üîß Ex√©cution √©tape: ${stepName}`, 'CortexMigration');

        try {
            switch (stepName) {
                case 'testConnections':
                    await this.testConnections();
                    break;

                case 'backupCurrentData':
                    if (config.createBackup) {
                        await this.backupCurrentData();
                    }
                    break;

                case 'migrateConfiguration':
                    await this.migrateConfiguration();
                    break;

                case 'testOptimizedVersion':
                    if (config.testNewVersion) {
                        await this.testOptimizedVersion();
                    }
                    break;

                case 'validateMigration':
                    if (config.validateData) {
                        await this.validateMigration();
                    }
                    break;

                case 'cleanupOldFiles':
                    if (config.autoCleanup) {
                        await this.cleanupOldFiles();
                    }
                    break;

                default:
                    throw new Error(`√âtape inconnue: ${stepName}`);
            }

            this.migrationStatus.completedSteps.push(stepName);
            logger.debug(`‚úÖ √âtape ${stepName} termin√©e`, 'CortexMigration');

        } catch (error) {
            const stepError = `Erreur √©tape ${stepName}: ${error.message}`;
            this.migrationStatus.errors.push(stepError);
            logger.error(`‚ùå ${stepError}`, 'CortexMigration');
            throw error;
        }
    }

    /**
     * Test des connexions et services
     */
    async testConnections() {
        logger.debug('üîó Test des connexions...', 'CortexMigration');

        // Test connexion base de donn√©es
        await cortexDataManager.testConnection();

        // Test du moteur de scraping
        await scrapingEngine.initialize();
        await scrapingEngine.cleanup();

        // Test du monitoring
        cortexPerformanceManager.getSystemStatus();

        logger.debug('‚úÖ Toutes les connexions OK', 'CortexMigration');
    }

    /**
     * Sauvegarde des donn√©es actuelles
     */
    async backupCurrentData() {
        logger.debug('üíæ Sauvegarde des donn√©es actuelles...', 'CortexMigration');

        // Obtenir les statistiques actuelles
        const currentStats = {
            timestamp: new Date().toISOString(),
            dataManager: cortexDataManager.getStats(),
            performance: cortexPerformanceManager.getStats()
        };

        // Sauvegarde dans un fichier de backup
        const backupData = {
            version: '1.0',
            migrationDate: new Date().toISOString(),
            stats: currentStats,
            config: {
                note: 'Backup before migration to Cortex v2.0'
            }
        };

        logger.debug('‚úÖ Sauvegarde cr√©√©e', 'CortexMigration');
        return backupData;
    }

    /**
     * Migration de la configuration
     */
    async migrateConfiguration() {
        logger.debug('‚öôÔ∏è Migration de la configuration...', 'CortexMigration');

        // Ici on pourrait migrer des configurations sp√©cifiques
        // Pour l'instant, les nouvelles configurations sont d√©j√† en place

        logger.debug('‚úÖ Configuration migr√©e', 'CortexMigration');
    }

    /**
     * Test de la version optimis√©e
     */
    async testOptimizedVersion() {
        logger.debug('üß™ Test de la version optimis√©e...', 'CortexMigration');

        try {
            // Test d'une petite session de scraping
            const testResults = await cortexOptimized.startScrapingSession({
                maxArticles: 5,
                onlyUnprocessed: true,
                enablePerformanceMonitoring: true,
                enableBatching: false // Pas de batch pour le test
            });

            if (!testResults.success) {
                throw new Error(`Test √©chou√©: ${testResults.error}`);
            }

            logger.debug(`‚úÖ Test r√©ussi: ${testResults.results.articlesProcessed} articles trait√©s`, 'CortexMigration');

        } catch (error) {
            logger.error(`‚ùå Test de la version optimis√©e √©chou√©: ${error.message}`, 'CortexMigration');
            throw error;
        }
    }

    /**
     * Validation de la migration
     */
    async validateMigration() {
        logger.debug('‚úÖ Validation de la migration...', 'CortexMigration');

        // V√©rification que tous les services fonctionnent
        const validationChecks = [
            { name: 'DataManager', check: () => cortexDataManager.getStats() },
            { name: 'ScrapingEngine', check: () => scrapingEngine.getStats() },
            { name: 'PerformanceManager', check: () => cortexPerformanceManager.getStats() },
            { name: 'CortexOptimized', check: () => cortexOptimized.getFullStats() }
        ];

        for (const { name, check } of validationChecks) {
            try {
                const result = check();
                logger.debug(`‚úÖ ${name} validation OK`, 'CortexMigration');
            } catch (error) {
                throw new Error(`Validation ${name} √©chou√©e: ${error.message}`);
            }
        }

        logger.debug('‚úÖ Validation compl√®te r√©ussie', 'CortexMigration');
    }

    /**
     * Nettoyage des anciens fichiers (optionnel)
     */
    async cleanupOldFiles() {
        logger.debug('üßπ Nettoyage des anciens fichiers...', 'CortexMigration');

        // Liste des fichiers qui pourraient √™tre nettoy√©s
        const filesToCleanup = [
            // Ajouter ici les fichiers obsol√®tes si n√©cessaire
        ];

        logger.debug('‚úÖ Nettoyage termin√©', 'CortexMigration');
    }

    /**
     * G√©n√®re un rapport de compatibilit√©
     * @returns {Object} Rapport de compatibilit√©
     */
    async generateCompatibilityReport() {
        logger.info('üìä G√©n√©ration rapport de compatibilit√© Cortex v2.0', 'CortexMigration');

        const report = {
            timestamp: new Date().toISOString(),
            version: '2.0.0',
            compatibility: {
                database: false,
                performance: false,
                scraping: false,
                overall: false
            },
            checks: [],
            recommendations: []
        };

        try {
            // Test base de donn√©es
            await cortexDataManager.testConnection();
            report.compatibility.database = true;
            report.checks.push('‚úÖ Base de donn√©es: Compatible');
        } catch (error) {
            report.checks.push(`‚ùå Base de donn√©es: ${error.message}`);
            report.recommendations.push('V√©rifier la configuration de la base de donn√©es');
        }

        try {
            // Test performance
            const systemStatus = cortexPerformanceManager.getSystemStatus();
            report.compatibility.performance = systemStatus.memoryUsage < 90;
            report.checks.push(`‚úÖ Performance: M√©moire ${systemStatus.memoryUsage}%`);
        } catch (error) {
            report.checks.push(`‚ùå Performance: ${error.message}`);
            report.recommendations.push('V√©rifier les ressources syst√®me disponibles');
        }

        try {
            // Test scraping
            await scrapingEngine.initialize();
            await scrapingEngine.cleanup();
            report.compatibility.scraping = true;
            report.checks.push('‚úÖ Moteur de scraping: Compatible');
        } catch (error) {
            report.checks.push(`‚ùå Moteur de scraping: ${error.message}`);
            report.recommendations.push('V√©rifier l\'installation de Puppeteer');
        }

        // Compatibilit√© globale
        report.compatibility.overall = Object.values(report.compatibility).every(Boolean);

        if (report.compatibility.overall) {
            report.recommendations.push('Syst√®me pr√™t pour Cortex v2.0');
        } else {
            report.recommendations.push('R√©soudre les probl√®mes identifi√©s avant migration');
        }

        logger.info(`üìä Rapport g√©n√©r√©: ${report.compatibility.overall ? 'Compatible' : 'Non compatible'}`, 'CortexMigration');

        return report;
    }

    /**
     * Obtient le statut de migration
     */
    getMigrationStatus() {
        return {
            ...this.migrationStatus,
            progress: this.migrationStatus.completedSteps.length / this.migrationSteps.length * 100
        };
    }

    /**
     * Remet √† z√©ro le statut de migration
     */
    reset() {
        this.migrationStatus = {
            isRunning: false,
            currentStep: null,
            completedSteps: [],
            errors: [],
            startTime: null,
            endTime: null
        };

        logger.info('üîÑ CortexMigration r√©initialis√©', 'CortexMigration');
    }
}

// Instance singleton
const cortexMigration = new CortexMigration();

export { cortexMigration };
export default CortexMigration;
