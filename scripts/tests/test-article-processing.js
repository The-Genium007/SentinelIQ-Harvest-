#!/usr/bin/env node
/**
 * üß™ Test de traitement d'un article complet
 * Prend une URL d'article existante et la traite compl√®tement
 */

import { ArticleUrlRepository, ArticleRepository } from './database/articleRepository.js';
import { logManager } from './utils/logManager.js';

async function testArticleProcessing() {
    console.log('üß™ Test de traitement complet d\'un article...\n');

    try {
        const urlRepo = new ArticleUrlRepository();
        const articleRepo = new ArticleRepository();

        // 1. R√©cup√®re une URL d'article existante
        console.log('1. R√©cup√©ration d\'une URL d\'article...');
        const articleUrls = await urlRepo.findAll({ limit: 1 });

        if (!articleUrls || articleUrls.length === 0) {
            console.log('   ‚ùå Aucune URL d\'article trouv√©e');
            return false;
        }

        const articleUrl = articleUrls[0];
        console.log(`   ‚úÖ URL trouv√©e: ${articleUrl.url}`);
        console.log(`   üìù Titre: ${articleUrl.title || 'Non d√©fini'}`);
        console.log(`   üë§ Auteur: ${articleUrl.author || 'Non d√©fini'}`);
        console.log(`   üîó Source: ${articleUrl.source || 'Non d√©fini'}`);

        // 2. V√©rifier si cet article n'a pas d√©j√† √©t√© trait√©
        console.log('\n2. V√©rification si l\'article est d√©j√† trait√©...');
        const existingArticle = await articleRepo.findByUrl(articleUrl.url);

        if (existingArticle) {
            console.log('   ‚ö†Ô∏è Article d√©j√† trait√©');
            console.log(`   üìÑ ID article: ${existingArticle.id}`);
            return true;
        } else {
            console.log('   ‚úÖ Article non trait√©, pr√™t pour le traitement');
        }

        // 3. Simulation du traitement d'article
        console.log('\n3. Simulation du traitement...');

        const processedArticle = {
            url: articleUrl.url,
            title: articleUrl.title || 'Titre extrait',
            content: `Contenu simul√© pour l'article: ${articleUrl.title}.\n\nCeci est un test de traitement d'article complet avec le sch√©ma corrig√©.`,
            summary: `R√©sum√© de: ${articleUrl.title}`,
            author: articleUrl.author || 'Auteur extrait',
            publishDate: articleUrl.publishDate || new Date().toISOString(),
            source: articleUrl.source || 'Source extraite',
            extractedAt: new Date().toISOString(),
            processedAt: new Date().toISOString()
        };

        // 4. Insertion de l'article trait√©
        console.log('\n4. Insertion de l\'article trait√©...');
        try {
            const savedArticle = await articleRepo.create(processedArticle);

            if (savedArticle) {
                console.log('   ‚úÖ Article trait√© et sauvegard√© avec succ√®s!');
                console.log(`   üÜî ID: ${savedArticle.id}`);
                console.log(`   üì∞ Titre: ${savedArticle.title}`);
                console.log(`   üìù Contenu: ${savedArticle.content.substring(0, 100)}...`);

                // 5. V√©rification finale
                console.log('\n5. V√©rification finale...');
                const stats = await articleRepo.getStats();
                console.log(`   üìä Total articles trait√©s: ${stats.total}`);
                console.log(`   üìä Articles r√©cents (24h): ${stats.recent24h}`);

                return true;

            } else {
                console.log('   ‚ùå Erreur lors de la sauvegarde');
                return false;
            }
        } catch (error) {
            console.log(`   ‚ùå Erreur lors du traitement: ${error.message}`);

            // Diagnostic de l'erreur
            if (error.message.includes('column') && error.message.includes('does not exist')) {
                console.log('   üí° Il semble qu\'il manque encore des colonnes dans la table articles');
                console.log('   üîß V√©rifiez le sch√©ma de la table articles dans Supabase');
            }

            return false;
        }

    } catch (error) {
        console.error(`‚ùå Erreur fatale: ${error.message}`);
        return false;
    }
}

async function main() {
    const success = await testArticleProcessing();

    if (success) {
        console.log('\nüéâ TEST R√âUSSI!');
        console.log('   ‚úÖ Le sch√©ma est correct');
        console.log('   ‚úÖ Le traitement d\'articles fonctionne');
        console.log('   üöÄ Vous pouvez maintenant lancer le syst√®me complet');
        console.log('');
        console.log('üí° Commandes utiles:');
        console.log('   npm run cortex:once      - Traite quelques articles');
        console.log('   npm run cortex:daemon    - Lance le traitement en continu');
        console.log('   npm run db:stats         - Voir les statistiques');
    } else {
        console.log('\n‚ùå TEST √âCHOU√â');
        console.log('   V√©rifiez les erreurs ci-dessus');
        console.log('   Il peut y avoir des probl√®mes de sch√©ma dans la table articles');
    }
}

main().catch(console.error);
