#!/usr/bin/env node

/**
 * Script de diagnostic pour WireScanner
 * V√©rifie l'√©tat du syst√®me et les fichiers de commande
 */

import { existsSync, readFileSync, statSync } from 'fs'
import { join } from 'path'

const COMMAND_FILE = join(process.cwd(), 'command_trigger.txt')

console.log('üîç Diagnostic WireScanner\n')

// V√©rification du fichier de commande
console.log('üìÅ Fichier de commande:')
if (existsSync(COMMAND_FILE)) {
    try {
        const content = readFileSync(COMMAND_FILE, 'utf8').trim()
        const stats = statSync(COMMAND_FILE)
        console.log(`   ‚úÖ Fichier pr√©sent: ${COMMAND_FILE}`)
        console.log(`   üìù Contenu: "${content}"`)
        console.log(`   üïí Cr√©√© le: ${stats.birthtime.toLocaleString()}`)
        console.log(`   ‚ö†Ô∏è  COMMANDE EN ATTENTE - Le scrapping va se d√©clencher`)
    } catch (error) {
        console.log(`   ‚ùå Erreur lecture: ${error.message}`)
    }
} else {
    console.log(`   üü¢ Aucun fichier de commande (normal)`)
}

console.log('\nüìä Logs r√©cents:')

// V√©rification des logs
const logFiles = [
    'logs/system.log',
    'logs/scraping.log',
    'logs/error.log'
]

for (const logFile of logFiles) {
    if (existsSync(logFile)) {
        try {
            const stats = statSync(logFile)
            console.log(`   üìÑ ${logFile}: ${Math.round(stats.size / 1024)}KB (modifi√© ${stats.mtime.toLocaleString()})`)
        } catch (error) {
            console.log(`   ‚ùå ${logFile}: Erreur lecture`)
        }
    } else {
        console.log(`   ‚ö™ ${logFile}: Non trouv√©`)
    }
}

console.log('\nüéØ Actions disponibles:')
console.log('   ‚Ä¢ D√©clencher manuellement: node manual-trigger.js start')
console.log('   ‚Ä¢ Script rapide: ./trigger-scrapping.sh')
console.log('   ‚Ä¢ Voir les logs: tail -f logs/system.log')
console.log('   ‚Ä¢ √âtat d√©taill√©: node manual-trigger.js status')

console.log('\nüí° Le cron v√©rifie les commandes toutes les 30 secondes')
console.log('   Prochaine v√©rification automatique dans max 30s')
