// Script de planification et d'ex√©cution automatique du crawl RSS avec gestion des logs et des erreurs
import cron from 'node-cron'
import { logger } from '../utils/logger.js'

// Import de la fonction principale de crawl optimis√©e
import { crawlUrl } from './crawlUrl.js'

// Import de l'int√©gration Cortex (remplace les webhooks)
import { integrateWithCortex, checkCortexAvailability } from './cortexIntegration.js'

/**
 * Ex√©cute la t√¢che principale de crawl et lance Cortex si n√©cessaire
 */
async function executeTask() {
    logger.info('‚ñ∂Ô∏è Lancement de crawlUrl', 'WireScanner')

    let scrapingResults = {
        articleCount: 0,
        feedCount: 0,
        errors: []
    };

    try {
        // V√©rifier la disponibilit√© de Cortex avant de commencer
        const cortexAvailable = await checkCortexAvailability();
        if (!cortexAvailable) {
            logger.warning('‚ö†Ô∏è Cortex non disponible, continuer sans int√©gration', 'WireScanner');
        }

        // Ex√©cuter le crawling
        const results = await crawlUrl();

        // Mise √† jour des r√©sultats si crawlUrl retourne des donn√©es
        if (results && typeof results === 'object') {
            scrapingResults = { ...scrapingResults, ...results };
        }

        logger.success('‚úÖ crawlUrl termin√© avec succ√®s', 'WireScanner')

        // Lancer Cortex automatiquement apr√®s le scraping (remplace les webhooks)
        if (cortexAvailable) {
            logger.info('üîó Lancement automatique de Cortex...', 'WireScanner');
            try {
                await integrateWithCortex(scrapingResults);
                logger.success('‚úÖ Int√©gration Cortex termin√©e avec succ√®s', 'WireScanner');
            } catch (cortexError) {
                logger.error(`‚ùå Erreur lors de l'int√©gration Cortex: ${cortexError.message}`, 'WireScanner');
                // Ne pas faire √©chouer la t√¢che WireScanner si Cortex √©choue
            }
        }

        return scrapingResults;

    } catch (err) {
        scrapingResults.errors.push(err.message);
        logger.error(`‚ùå Erreur dans crawlUrl: ${err.message}`, 'WireScanner')
        throw err
    }
}

/**
 * Ex√©cute la t√¢che avec gestion des erreurs et retries (jusqu'√† 3 tentatives).
 * @param {number} retries - Nombre de tentatives d√©j√† effectu√©es
 */
async function safeExecute(retries = 0) {
    const MAX = 3
    try {
        await executeTask()
    } catch (err) {
        logger.warning(`‚ùå Erreur (${err.message}). Retry ${retries + 1}/${MAX}`, 'WireScanner')
        if (retries < MAX - 1) {
            return safeExecute(retries + 1)
        }
        logger.error('üõë √âchec d√©finitif.', 'WireScanner')
    }
}

// üö´ Protection contre chevauchement d'ex√©cution
let running = false
let lastRunTime = null
const TASK_TIMEOUT = 30 * 60 * 1000 // 30 minutes timeout

// üîÑ Fonction pour r√©initialiser l'√©tat en cas de blocage
function resetRunningState() {
    if (running && lastRunTime && (Date.now() - lastRunTime > TASK_TIMEOUT)) {
        logger.warning('‚ö†Ô∏è R√©initialisation forc√©e de l\'√©tat running apr√®s timeout', 'WireScanner')
        running = false
        lastRunTime = null
    }
}

// üïî Planification cron : tous les jours √† 03:00 Europe/Paris
const task = cron.schedule(
    '0 3 * * *',
    () => {
        // V√©rification du timeout avant d'ex√©cuter
        resetRunningState()

        if (running) {
            logger.warning('‚è≠Ô∏è T√¢che pr√©c√©dente toujours en cours, saut de cette ex√©cution.', 'WireScanner')
            return
        }

        running = true
        lastRunTime = Date.now()

        safeExecute().finally(() => {
            running = false
            lastRunTime = null
            logger.info('üèÅ T√¢che WireScanner + Cortex termin√©e, √©tat r√©initialis√©', 'WireScanner')
        })
    },
    {
        scheduled: true,
        timezone: 'Europe/Paris'
    }
)

// üîç Validation de l'expression cron au d√©marrage
if (!cron.validate('0 3 * * *')) {
    throw new Error('üö´ Expression cron invalide')
}

// üìù D√©marrage du cron
logger.success('üîÑ Cron d√©marr√© ‚Äì tous les jours √† 03:00 Europe/Paris', 'WireScanner')

// üì§ Fonctions pour stopper ou relancer la t√¢che cron dynamiquement
export function stopTask() {
    task.stop();
    running = false;
    lastRunTime = null;
    logger.info('‚è∏Ô∏è Cron stopp√© et √©tat r√©initialis√©', 'WireScanner')
}

export function startTask() {
    task.start();
    logger.info('‚ñ∂Ô∏è Cron relanc√©', 'WireScanner')
}

/**
 * Lance le scrapping manuellement (en dehors du cron)
 * Id√©al pour tester ou ex√©cuter √† la demande
 */
export async function runScrappingNow() {
    // V√©rification du timeout avant d'ex√©cuter
    resetRunningState()

    if (running) {
        const message = '‚è≠Ô∏è T√¢che d√©j√† en cours, impossible de lancer manuellement'
        logger.warning(message, 'WireScanner')
        throw new Error(message)
    }

    running = true
    lastRunTime = Date.now()

    logger.info('üöÄ Lancement manuel du scrapping...', 'WireScanner')

    try {
        const results = await safeExecute()
        logger.success('‚úÖ Scrapping manuel termin√© avec succ√®s', 'WireScanner')
        return results
    } catch (error) {
        logger.error(`‚ùå Erreur lors du scrapping manuel: ${error.message}`, 'WireScanner')
        throw error
    } finally {
        running = false
        lastRunTime = null
        logger.info('üèÅ Scrapping manuel termin√©, √©tat r√©initialis√©', 'WireScanner')
    }
}

// üîß Fonction utilitaire pour forcer la r√©initialisation
export function forceReset() {
    running = false
    lastRunTime = null
    logger.info('üîÑ √âtat forc√© √† la r√©initialisation', 'WireScanner')
}

// üïí V√©rification p√©riodique de l'√©tat (toutes les 5 minutes)
setInterval(resetRunningState, 5 * 60 * 1000)
