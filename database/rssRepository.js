/**
 * üì° Repository pour la gestion des flux RSS
 * G√®re les op√©rations CRUD pour la table ListUrlRss
 */

import { BaseRepository } from './baseRepository.js';
import { logManager } from '../utils/logManager.js';

/**
 * Repository sp√©cialis√© pour les flux RSS
 */
export class RssRepository extends BaseRepository {
    constructor() {
        super('ListUrlRss');
    }

    /**
     * üìã R√©cup√®re tous les flux RSS actifs
     * @param {boolean} activeOnly - Ne r√©cup√©rer que les flux actifs (incluant valid=true)
     * @returns {Promise<Array>} Liste des flux RSS
     */
    async getAllFeeds(activeOnly = true) {
        try {
            // Inclure la colonne 'valid' dans la s√©lection
            const filters = activeOnly ? { valid: true } : {};

            const feeds = await this.findAll({
                select: 'id, url, created_at, valid',
                filters: filters, // Utiliser 'filters' au lieu de 'where'
                order: { column: 'created_at', ascending: false }
            });

            // Log simplifi√© pour √©viter surcharge
            logManager.info(`üì° ${feeds.length} flux RSS r√©cup√©r√©s`, 'RssRepository');
            return feeds.map(feed => ({
                id: feed.id,
                url_rss: feed.url, // Conversion pour compatibilit√©
                url: feed.url,
                created_at: feed.created_at,
                valid: feed.valid ?? true, // Par d√©faut true si null
                active: feed.valid ?? true // Compatibilit√©: active = valid
            }));

        } catch (error) {
            logManager.error(`Erreur lors de la r√©cup√©ration des flux RSS: ${error.message}`, 'RssRepository');
            throw error;
        }
    }    /**
     * üîç Trouve un flux RSS par URL
     * @param {string} url - URL du flux RSS
     * @returns {Promise<Object|null>} Flux RSS trouv√© ou null
     */
    async findByUrl(url) {
        try {
            if (!url) {
                throw new Error('URL requise');
            }

            const feed = await this.findOne({ url: url }); // Utiliser 'url' au lieu de 'url_rss'

            logManager.debug(`Recherche flux RSS par URL: ${url} - ${feed ? 'trouv√©' : 'non trouv√©'}`, 'RssRepository');

            if (feed) {
                // Conversion pour compatibilit√©
                return {
                    ...feed,
                    url_rss: feed.url,
                    active: true
                };
            }

            return null;

        } catch (error) {
            logManager.error(`Erreur findByUrl: ${error.message}`, 'RssRepository');
            throw error;
        }
    }

    /**
     * ‚úÖ V√©rifie si un flux RSS existe par URL
     * @param {string} url - URL du flux RSS
     * @returns {Promise<boolean>} True si existe, false sinon
     */
    async existsByUrl(url) {
        try {
            if (!url) {
                return false;
            }

            return await this.exists({ url: url }); // Utiliser 'url' au lieu de 'url_rss'

        } catch (error) {
            logManager.error(`Erreur existsByUrl: ${error.message}`, 'RssRepository');
            return false;
        }
    }

    /**
     * ‚ûï Ajoute un nouveau flux RSS
     * @param {Object} feedData - Donn√©es du flux RSS
     * @param {string} feedData.url_rss - URL du flux RSS
     * @param {string} feedData.titre - Titre du flux (ignor√© - pas de colonne)
     * @param {string} feedData.description - Description du flux (ignor√© - pas de colonne)
     * @param {boolean} feedData.active - Statut actif/inactif (ignor√© - pas de colonne)
     * @returns {Promise<Object>} Flux RSS cr√©√©
     */
    async addFeed(feedData) {
        try {
            const url = feedData.url_rss || feedData.url;

            if (!url) {
                throw new Error('URL RSS requise');
            }

            // V√©rification de l'existence
            const exists = await this.existsByUrl(url);
            if (exists) {
                throw new Error(`Un flux RSS avec cette URL existe d√©j√†: ${url}`);
            }

            // Validation de l'URL
            try {
                new URL(url);
            } catch {
                throw new Error(`URL RSS invalide: ${url}`);
            }

            // La table ListUrlRss n'a que les colonnes: id, url, created_at
            const newFeed = await this.create({
                url: url,
                created_at: new Date().toISOString()
            });

            logManager.success(`Nouveau flux RSS ajout√©: ${url}`, 'RssRepository');

            // Retourner avec format de compatibilit√©
            return {
                ...newFeed,
                url_rss: newFeed.url,
                titre: feedData.titre || '',
                description: feedData.description || '',
                active: true
            };

        } catch (error) {
            logManager.error(`Erreur lors de l'ajout du flux RSS: ${error.message}`, 'RssRepository');
            throw error;
        }
    }

    /**
     * üìù Met √† jour un flux RSS
     * @param {string|number} id - ID du flux RSS
     * @param {Object} updateData - Donn√©es √† mettre √† jour
     * @returns {Promise<Object>} Flux RSS mis √† jour
     */
    async updateFeed(id, updateData) {
        try {
            if (!id) {
                throw new Error('ID requis');
            }

            // V√©rification de l'existence
            const existingFeed = await this.findById(id);
            if (!existingFeed) {
                throw new Error(`Flux RSS non trouv√© avec l'ID: ${id}`);
            }

            // Si l'URL est modifi√©e, v√©rifier qu'elle n'existe pas d√©j√†
            if (updateData.url_rss && updateData.url_rss !== existingFeed.url_rss) {
                const urlExists = await this.existsByUrl(updateData.url_rss);
                if (urlExists) {
                    throw new Error(`Un flux RSS avec cette URL existe d√©j√†: ${updateData.url_rss}`);
                }

                // Validation de la nouvelle URL
                try {
                    new URL(updateData.url_rss);
                } catch {
                    throw new Error(`URL RSS invalide: ${updateData.url_rss}`);
                }
            }

            const updatedFeed = await this.update(id, {
                ...updateData,
                updated_at: new Date().toISOString()
            });

            logManager.success(`Flux RSS mis √† jour: ${existingFeed.titre}`, 'RssRepository');
            return updatedFeed;

        } catch (error) {
            logManager.error(`Erreur lors de la mise √† jour du flux RSS: ${error.message}`, 'RssRepository');
            throw error;
        }
    }

    /**
     * üîÑ Active/d√©sactive un flux RSS
     * @param {string|number} id - ID du flux RSS
     * @param {boolean} active - Nouveau statut
     * @returns {Promise<Object>} Flux RSS mis √† jour
     */
    async toggleFeedStatus(id, active) {
        try {
            if (!id) {
                throw new Error('ID requis');
            }

            const feed = await this.updateFeed(id, { active });

            logManager.info(`Flux RSS ${active ? 'activ√©' : 'd√©sactiv√©'}: ${feed.titre}`, 'RssRepository');
            return feed;

        } catch (error) {
            logManager.error(`Erreur lors du changement de statut: ${error.message}`, 'RssRepository');
            throw error;
        }
    }

    /**
     * üóëÔ∏è Supprime un flux RSS
     * @param {string|number} id - ID du flux RSS
     * @returns {Promise<boolean>} True si supprim√© avec succ√®s
     */
    async deleteFeed(id) {
        try {
            if (!id) {
                throw new Error('ID requis');
            }

            // V√©rification de l'existence
            const existingFeed = await this.findById(id, 'titre');
            if (!existingFeed) {
                throw new Error(`Flux RSS non trouv√© avec l'ID: ${id}`);
            }

            const success = await this.delete(id);

            if (success) {
                logManager.success(`Flux RSS supprim√©: ${existingFeed.titre}`, 'RssRepository');
            }

            return success;

        } catch (error) {
            logManager.error(`Erreur lors de la suppression du flux RSS: ${error.message}`, 'RssRepository');
            throw error;
        }
    }

    /**
     * üìä Statistiques des flux RSS
     * @returns {Promise<Object>} Statistiques
     */
    async getStats() {
        try {
            const total = await this.count();

            // Pas de colonne 'active' dans cette table, tous sont consid√©r√©s comme actifs
            const stats = {
                total,
                active: total, // Tous sont consid√©r√©s comme actifs
                inactive: 0,
                percentage_active: 100
            };

            logManager.debug(`Statistiques flux RSS: ${JSON.stringify(stats)}`, 'RssRepository');
            return stats;

        } catch (error) {
            logManager.error(`Erreur lors du calcul des statistiques: ${error.message}`, 'RssRepository');
            throw error;
        }
    }

    /**
     * ‚ùå Marque un flux RSS comme invalide en cas d'erreur de parsing
     * @param {string} url - URL du flux RSS en erreur
     * @param {string} errorMessage - Message d'erreur pour le log
     * @returns {Promise<boolean>} True si mis √† jour avec succ√®s
     */
    async markAsInvalid(url, errorMessage = null) {
        try {
            if (!url) {
                throw new Error('URL requise');
            }

            // Trouver le flux par URL
            const feed = await this.findByUrl(url);
            if (!feed) {
                logManager.warn(`Flux RSS non trouv√© pour marquage invalide: ${url}`, 'RssRepository');
                return false;
            }

            // Mettre √† jour le statut valid √† false
            const updateResult = await this.update(feed.id, { valid: false });

            if (updateResult) {
                logManager.warn(`üìõ Flux RSS marqu√© comme invalide: ${url}${errorMessage ? ` (${errorMessage})` : ''}`, 'RssRepository');
                return true;
            }

            return false;

        } catch (error) {
            logManager.error(`Erreur lors du marquage invalide: ${error.message}`, 'RssRepository');
            return false;
        }
    }

    /**
     * ‚úÖ Marque un flux RSS comme valide (r√©habilitation)
     * @param {string} url - URL du flux RSS √† r√©habiliter
     * @returns {Promise<boolean>} True si mis √† jour avec succ√®s
     */
    async markAsValid(url) {
        try {
            if (!url) {
                throw new Error('URL requise');
            }

            // Trouver le flux par URL
            const feed = await this.findByUrl(url);
            if (!feed) {
                logManager.warn(`Flux RSS non trouv√© pour marquage valide: ${url}`, 'RssRepository');
                return false;
            }

            // Mettre √† jour le statut valid √† true
            const updateResult = await this.update(feed.id, { valid: true });

            if (updateResult) {
                // R√©duction des logs pour √©viter surcharge - passage en debug
                if (Math.random() < 0.1) { // Log seulement 10% des succ√®s
                    logManager.debug(`‚úÖ Flux RSS marqu√© comme valide: ${url}`, 'RssRepository');
                }
                return true;
            }

            return false;

        } catch (error) {
            logManager.error(`Erreur lors du marquage valide: ${error.message}`, 'RssRepository');
            return false;
        }
    }

    /**
     * üîç R√©cup√®re tous les flux RSS avec filtrage c√¥t√© client (workaround)
     * @param {boolean} activeOnly - Si true, ne r√©cup√®re que les flux valides
     * @returns {Promise<Array>} Liste des flux RSS
     */
    async getAllFeedsClientFilter(activeOnly = true) {
        try {
            // R√©cup√©rer tous les flux sans filtre
            const allFeeds = await this.findAll({
                select: 'id, url, created_at, valid',
                order: { column: 'created_at', ascending: false }
            });

            // Filtrage c√¥t√© client
            const filteredFeeds = activeOnly
                ? allFeeds.filter(feed => feed.valid === true)
                : allFeeds;

            // Log simplifi√© pour √©viter surcharge  
            logManager.info(`üì° ${filteredFeeds.length} flux RSS filtr√©s`, 'RssRepository');

            return filteredFeeds.map(feed => ({
                id: feed.id,
                url_rss: feed.url, // Conversion pour compatibilit√©
                url: feed.url,
                created_at: feed.created_at,
                valid: feed.valid ?? true, // Par d√©faut true si null
                active: feed.valid ?? true // Compatibilit√©: active = valid
            }));

        } catch (error) {
            logManager.error(`Erreur lors de la r√©cup√©ration des flux RSS (client filter): ${error.message}`, 'RssRepository');
            throw error;
        }
    }
}

// Instance singleton
export const rssRepository = new RssRepository();
